#!/usr/bin/env -S swipl -O -f none -g swimpd(sync) -t halt
user:file_search_path(python, 'python').
user:file_search_path(bbc, 'prolog').

:- set_prolog_flag(optimise_debug, false).
:- set_prolog_flag(message_context, [time, thread]).

:- use_module(library(main)).
:- use_module(library(apply_macros)).
:- use_module(library(dcg_macros)). % NB. import into user means these apply globally

:- use_module(prolog/swimpd/telnetd,  [telnet_server/3]).
:- use_module(prolog/swimpd/protocol, [mpd_interactor/0]).
:- use_module(prolog/swimpd/gst,      [start_gst_thread/0]).
:- use_module(prolog/swimpd/swimpd,   [mpd_init/0, restore_state/1, save_state/1]).
:- use_module(prolog/swimpd/state,    [attach/1]).
:- use_module(prolog/swimpd/tools,    [thread/2]).

swimpd(async) :- thread_create(main, _, [detached(true), alias(mpd_server)]).
swimpd(sync)  :- on_signal(int, _, kill_server), main.

kill_server(Signal) :- 
   debug(swimpd(swimpd,s(s(0))), 'Killing swimpd server on signal ~w', [Signal]), 
   throw(shutdown).
kill_satellites :-
   forall(thread(client, Id), thread_signal(Id, throw(hangup))),
   thread_signal(gst_slave, throw(shutdown)).

local(ip(127,0,0,1)).
local(ip(192,168,1,_)).

opt_type(p, port, integer).
opt_type(debug, debug, atom).

opt_help(port, 'Port number on which MPD service is provided').
opt_help(debug, 'Enable debugging messages on this topic').

main(ArgV) :- 
   argv_options(ArgV, [StateFile], Options),
   cli_parse_debug_options(Options, Options1),
   option(port(Port), Options1, 6601),
   attach(StateFile), mpd_init, 
   setup_call_cleanup(start_gst_thread, 
                      telnet_server(mpd_interactor, Port, [allow(local)]),
                      kill_satellites).

% vim: ft=prolog
